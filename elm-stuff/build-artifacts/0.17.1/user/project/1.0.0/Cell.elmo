var _user$project$Cell$isCellAt = F2(
	function (model, position) {
		return A2(_elm_lang$core$List$member, position, model);
	});
var _user$project$Cell$addPosition = F2(
	function (leftPosition, rightPosition) {
		return {
			ctor: '_Tuple2',
			_0: _elm_lang$core$Basics$fst(leftPosition) + _elm_lang$core$Basics$fst(rightPosition),
			_1: _elm_lang$core$Basics$snd(leftPosition) + _elm_lang$core$Basics$snd(rightPosition)
		};
	});
var _user$project$Cell$possibleNeighbours = function (position) {
	return _elm_lang$core$Native_List.fromArray(
		[
			A2(
			_user$project$Cell$addPosition,
			position,
			{ctor: '_Tuple2', _0: -1, _1: 1}),
			A2(
			_user$project$Cell$addPosition,
			position,
			{ctor: '_Tuple2', _0: -1, _1: 0}),
			A2(
			_user$project$Cell$addPosition,
			position,
			{ctor: '_Tuple2', _0: -1, _1: -1}),
			A2(
			_user$project$Cell$addPosition,
			position,
			{ctor: '_Tuple2', _0: 0, _1: 1}),
			A2(
			_user$project$Cell$addPosition,
			position,
			{ctor: '_Tuple2', _0: 0, _1: -1}),
			A2(
			_user$project$Cell$addPosition,
			position,
			{ctor: '_Tuple2', _0: 1, _1: 1}),
			A2(
			_user$project$Cell$addPosition,
			position,
			{ctor: '_Tuple2', _0: 1, _1: 0}),
			A2(
			_user$project$Cell$addPosition,
			position,
			{ctor: '_Tuple2', _0: 1, _1: -1})
		]);
};
var _user$project$Cell$neighbours = F2(
	function (cellList, position) {
		return A2(
			_elm_lang$core$List$filter,
			_user$project$Cell$isCellAt(cellList),
			_user$project$Cell$possibleNeighbours(position));
	});
var _user$project$Cell$updatePosition = F3(
	function (cells, position, neighbourCount) {
		return (_elm_lang$core$Native_Utils.cmp(neighbourCount, 2) < 0) ? _elm_lang$core$Maybe$Nothing : (_elm_lang$core$Native_Utils.eq(neighbourCount, 3) ? _elm_lang$core$Maybe$Just(position) : ((_elm_lang$core$Native_Utils.eq(neighbourCount, 2) && A2(_user$project$Cell$isCellAt, cells, position)) ? _elm_lang$core$Maybe$Just(position) : _elm_lang$core$Maybe$Nothing));
	});
var _user$project$Cell$unique = function (list) {
	return _elm_lang$core$Set$toList(
		_elm_lang$core$Set$fromList(list));
};
var _user$project$Cell$positionsToCheck = function (cells) {
	return _user$project$Cell$unique(
		A2(
			_elm_lang$core$Basics_ops['++'],
			cells,
			A2(_elm_lang$core$List$concatMap, _user$project$Cell$possibleNeighbours, cells)));
};
var _user$project$Cell$updatePositions = function (cells) {
	return _elm_lang$core$Set$fromList(
		A2(
			_elm_lang$core$List$filterMap,
			function (position) {
				return A3(
					_user$project$Cell$updatePosition,
					_elm_lang$core$Set$toList(cells),
					position,
					_elm_lang$core$List$length(
						A2(
							_user$project$Cell$neighbours,
							_elm_lang$core$Set$toList(cells),
							position)));
			},
			_user$project$Cell$positionsToCheck(
				_elm_lang$core$Set$toList(cells))));
};
var _user$project$Cell$updateModel = function (model) {
	return {
		cells: _user$project$Cell$updatePositions(model.cells)
	};
};
var _user$project$Cell$initModel = {
	cells: _elm_lang$core$Set$fromList(_user$project$CellInit$cells)
};
var _user$project$Cell$Model = function (a) {
	return {cells: a};
};
